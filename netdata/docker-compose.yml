version: '3'
services:
  netdata:
    image: d34dc3n73r/netdata-glibc
    container_name: netdata
    runtime: nvidia
    hostname: netdata.gserver.club # set to fqdn of host
    ports:
      - 19999:19999
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - DOCKER_HOST=docker-proxy:2375
      - DO_NOT_TRACK=
    volumes:
      # Netdata data
      - ./volumes/netdataconfig:/etc/netdata:ro
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      # System monitoring files
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      # Mounting the entire disk to monitor space!
      - /:/host:ro
      # Custom dashboards go in ./dashboards
      - ./dashboards:/usr/share/netdata/web/custom:ro
  
  # Docker proxy is required for Netdata to see container names
  docker-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: netdata-docker-proxy
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CONTAINERS=1
  
  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    # Messy but we need to read from containers outside this network
    network_mode: host
    # ports:
    #   - 9090:9090
    restart: unless-stopped
    user: 1000:1000
    command:
      # Base config
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      # Custom config
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=1y'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./volumes/prometheus:/prometheus

  grafana:
    image: grafana/grafana:8.1.0
    container_name: grafana
    # Very messy but we need prometheus :(
    network_mode: host
    # ports:
    #   - 9100:3000
    user: 1000:1000
    restart: unless-stopped
    environment:
      - PORT=9200
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./volumes/grafana/data:/var/lib/grafana
  
  loki:
    image: grafana/loki:2.4.0
    container_name: loki
    # We need same network as Grafana
    network_mode: host
    user: 1000:1000
    volumes:
      - ./loki.yml:/config/loki.yml
    command: -config.file=/config/loki.yml

  # Docker plugin is required on host
  promtail:
    image: grafana/promtail:2.4.0
    container_name: promtail
    # We need same network as Loki
    network_mode: host
    # user: 1000:1000
    volumes:
      - /var/log:/var/log:ro
      - ./promtail.yml:/config/promtail.yml
    command: -config.file=/config/promtail.yml

  # transmission-exporter:
  #   image: metalmatze/transmission-exporter
  #   restart: unless-stopped
  #   links:
  #     - transmission
  #   # Messy, but we need to get to transmission in the torrenting docker compose file
  #   network_mode: "host"
  #   ports:
  #     - 19091:19091
  #   environment:
  #     TRANSMISSION_ADDR: http://127.0.0.1:9091

  pihole-exporter:
    image: ekofr/pihole-exporter
    container_name: pihole-exporter
    # Needs to get to pihole
    network_mode: host
    restart: unless-stopped
    environment:
      - PORT=9617
      - PIHOLE_HOSTNAME=${PIHOLE_HOSTNAME}
      - PIHOLE_PASSWORD=${PIHOLE_PASSWORD}
      - INTERVAL=60s

volumes:
  netdatalib:
  netdatacache:

